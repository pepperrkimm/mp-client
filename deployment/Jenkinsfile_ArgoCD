def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'node', image: 'node:20-slim', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'git', image: 'alpine/git:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'sonar-scanner', image: 'sonarsource/sonar-scanner-cli:latest', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/opt/sonar-scanner/.sonar/cache', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def namespace
        def manifestRepo = "https://github.com/HyoJooJo/mvne-manifest.git"
        def manifestDir = "mvne-manifest"

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage('Code Analysis') {
            container('node') {
                sh "npm install"
                sh "npm test -- --coverage --passWithNoTests"
            }
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group ictcoe-edu --name ${props.teamid}-aks --overwrite-existing
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                    """
                }
            }
        }

        stage('Build & Push Image') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    def imagePath = "${props.registry}/${props.image_org}/mp-client:${imageTag}"
                    
                    sh """
                        podman login ${props.registry} --username \$USERNAME --password \$PASSWORD

                        podman build \
                            --build-arg PROJECT_FOLDER="." \
                            --build-arg BUILD_FOLDER="deployment/container" \
                            --build-arg EXPORT_PORT="${props.export_port}" \
                            -f deployment/container/Dockerfile-mp-client \
                            -t ${imagePath} .
                        
                        podman push ${imagePath}
                    """
                }
            }
        }

        stage('Update Deployment Manifest') {
            container('git') {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credentials',
                    usernameVariable: 'GIT_USERNAME',
                    passwordVariable: 'GIT_PASSWORD'
                )]) {
                    // GitHub 인증 설정
                    sh """
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins CI"
                        git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/HyoJooJo/mvne-manifest.git ${manifestDir}
                    """

                    // 프론트엔드 이미지 업데이트
                    def imagePath = "${props.registry}/${props.image_org}/mp-client:${imageTag}"
                    sh """
                        cd ${manifestDir}
                        # yq 대신 sed 사용하여 이미지 태그 업데이트
                        sed -i 's|image: ${props.registry}/${props.image_org}/mp-client:.*|image: ${imagePath}|g' mp-client/deployment/mp-client-deployment.yaml
                        git add mp-client/deployment/mp-client-deployment.yaml
                    """

                    // 변경사항 커밋 및 푸시
                    sh """
                        cd ${manifestDir}
                        git commit -m "Update frontend image to tag ${imageTag}" || echo "No changes to commit"
                        git push
                    """
                }
            }
        }

        stage('Verify Deployment') {
            container('azure-cli') {
                sh """
                    echo "ArgoCD will automatically sync and deploy the updated manifest."
                    echo "Frontend service updated with image tag: ${imageTag}"
                """
            }
        }
    }
}
