{"ast":null,"code":"import axios from 'axios';\nconst config = window.__runtime_config__ || {\n  AUTH_URL: 'http://20.1.2.3/api/auth',\n  BILLING_URL: 'http://20.1.2.3/api/billings',\n  PRODUCT_URL: 'http://20.1.2.3/api/products',\n  CUSTOMER_URL: 'http://20.1.2.3/api/customers'\n};\nconst api = axios.create({\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 설정\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 설정\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // 인증 오류 시 로그인 페이지로 리다이렉트\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;\nexport { config };","map":{"version":3,"names":["axios","config","window","__runtime_config__","AUTH_URL","BILLING_URL","PRODUCT_URL","CUSTOMER_URL","api","create","timeout","headers","interceptors","request","use","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","location","href"],"sources":["C:/home/workspace/mp-client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst config = window.__runtime_config__ || {\r\n  AUTH_URL: 'http://20.1.2.3/api/auth',\r\n  BILLING_URL: 'http://20.1.2.3/api/billings',\r\n  PRODUCT_URL: 'http://20.1.2.3/api/products',\r\n  CUSTOMER_URL: 'http://20.1.2.3/api/customers'\r\n};\r\n\r\nconst api = axios.create({\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 요청 인터셉터 설정\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 응답 인터셉터 설정\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      // 인증 오류 시 로그인 페이지로 리다이렉트\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\nexport { config };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAGC,MAAM,CAACC,kBAAkB,IAAI;EAC1CC,QAAQ,EAAE,0BAA0B;EACpCC,WAAW,EAAE,8BAA8B;EAC3CC,WAAW,EAAE,8BAA8B;EAC3CC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,GAAG,GAAGR,KAAK,CAACS,MAAM,CAAC;EACvBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBb,MAAM,IAAK;EACV,MAAMc,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTd,MAAM,CAACU,OAAO,CAACO,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOd,MAAM;AACf,CAAC,EACAkB,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCtB,MAAM,CAACuB,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG;AAClB,SAASP,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}